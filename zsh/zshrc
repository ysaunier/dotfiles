# source virtualenvwrapper.sh
#
# # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# # Initialization code that may require console input (password prompts, [y/n]
# # confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your dotfiles installation.
export DOTFILES=$HOME/.dotfiles

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Hide username in prompt
DEFAULT_USER=`whoami`

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
# ZSH_THEME="agnoster"
# ZSH_THEME="powerlevel9k/powerlevel9k"
# ZSH_THEME="powerlevel10k/powerlevel10k"
ZSH_THEME=""

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=$DOTFILES/zsh

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  docker
  docker-compose
  macos
  # zsh-history
  zsh-autosuggestions
  zsh-syntax-highlighting
  zsh-completions
  git-trim
  fzf
)

# Activate Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# User configuration

# Keep more than the last 10000000 commands in my history
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000000
SAVEHIST=$HISTSIZE

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# kitty: jumping words using option + arrows
# https://github.com/kovidgoyal/kitty/issues/838#issuecomment-770328902
bindkey "\e[1;3D" backward-word # ⌥←
bindkey "\e[1;3C" forward-word  # ⌥→

eval "$(starship init zsh)"

# # Get the list of submodules from .gitmodules
# DOTFILES_SUBMODULES=$(git submodule status | cut -d ' ' -f 3)
#
# # Include scripts in Bin
# export PATH=$HOME/.dotfiles/bin:$PATH
# for submodule in "${DOTFILES_SUBMODULES[@]}"; do
#     [[ ! -d "$HOME/.dotfiles/$submodule/bin" ]] || export PATH=$HOME/.dotfiles/$submodule/bin:$PATH
# done

prompt_assumed_role() {
    # See: https://github.com/ohmyzsh/ohmyzsh/blob/c66d8a841d231895be37721220f23b537d90c5a5/themes/agnoster.zsh-theme#L246
    if [[ -n $ASSUMED_ROLE ]]; then
        if [[ $ASSUMED_ROLE == *"prod"* ]]; then
            local color='%F{red}'
            local aws_env="prod"
        elif [[ $ASSUMED_ROLE == *"stage"* ]]; then
            local color='%F{orange}'
            local aws_env="stage"
        else
            local color='%F{green}'
            local aws_env="dev"
        fi

        #prompt_segment $color 255
        # print -Pn "$(basename $aws_env)"
        echo -n "%{$color%}$aws_env%{%f%}"

        if [[ $joined == false ]]; then
            # Middle segment
            echo -n "$(print_icon 'LEFT_SEGMENT_SEPARATOR')$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS"
        fi
    fi
}

# Segment to display the current AWS Details
prompt_aws_details2() {
    local ROOT_PREFIX="${3}"
    local background_color="green"

    if [[ -n $AWS_PROFILE ]]; then
        if [[ $AWS_PROFILE == *"prod"* ]]; then
            local aws_profile="prod"
            background_color="red"
        elif [[ $AWS_PROFILE == *"stage"* ]]; then
            local aws_profile="stage"
            background_color="orange"
        else
            local aws_profile="dev"
        fi
    fi
    if [[ -n $AWS_DEFAULT_REGION ]]; then
        local aws_region=$AWS_DEFAULT_REGION
    fi

    echo "$1_prompt_segment"
    echo "$0"
    echo "$1"
    echo "$2"
    echo "$background_color"
}

prompt_aws_profile() {
    if [[ -n $AWS_PROFILE ]]; then
        if [[ $AWS_PROFILE == *"prod"* ]]; then
            local color='%F{red}'
            local aws_profile="PROD"
        elif [[ $AWS_PROFILE == *"stage"* ]]; then
            local color='%F{orange}'
            local aws_profile="STAGE"
        else
            local color='%F{green}'
            local aws_profile="DEV"
        fi
        #print -Pn "$(basename profile:$aws_profile)"
        echo -n "%{$color%}$aws_profile%{%f%}" # \uf230 is 
    fi
}

prompt_aws_details() {
    if [[ -n $AWS_PROFILE ]]; then
        if [[ $AWS_PROFILE == *"prod"* ]]; then
            aws_profile="prod"
        elif [[ $AWS_PROFILE == *"stage"* ]]; then
            aws_profile="stage"
        else
            aws_profile="dev"
        fi
    fi
    if [[ -n $AWS_DEFAULT_REGION ]]; then
        aws_region=$AWS_DEFAULT_REGION
    fi

    if [[ -n $aws_profile ]] && [[ -n $aws_region ]]; then
        info="$aws_profile:$aws_region"
        #prompt_segment 93 255
        print -Pn "$(basename $info)"
    elif [[ -n $aws_profile ]]; then
        #prompt_segment 93 255
        print -Pn "$(basename $aws_profile)"
    elif [[ -n $aws_region ]]; then
        #prompt_segment 93 255
        print -Pn "$(basename $aws_region)"
    fi
}

prompt_color_test() {
    for a in {0..255}; do
        #prompt_segment $a 0
        print -Pn "$(basename $a)"
    done
}

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

prompt_context() {
    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
      prompt_segment black default "%(!.%{%F{yellow}%}.)$USER"
    fi
}

build_prompt() {
    # RETVAL=$?
    # prompt_status
    prompt_context
    prompt_dir
    prompt_git
    prompt_end
}

function replace_db() {
  ORIGIN="$1"
  DESTINATION="$HOME/Projects/poka/docker-compose/backup/db_backup.sql"

  if [ -f "$ORIGIN" ]; then

    # Unzip file if needed
    if [[ "$ORIGIN" =~ \.gz$ ]]; then
      echo "Unzip $ORIGIN..."
      gzip -d -k "$ORIGIN"
      ORIGIN=$(echo "$ORIGIN" | cut  -f 1 -d '.')
    fi

    rm -f "$DESTINATION"
    echo "Move $ORIGIN to $DESTINATION..."
    mv "$ORIGIN" "$DESTINATION"
    echo "Next think about to run: cd ~/Projects/Poka; make reset-docker;"
    echo "Done!"

  else
    echo "File $ORIGIN doesn't exist or is not a file"
  fi
}


function notes(){
  echo "# Assume Roles"
  echo "eval \$(assume-role poka-stage-us-east-1)"
  echo "eval \$(assume-role poka-dev-user)"
  echo ""
  echo "# Export Profiles"
  echo "export AWS_PROFILE=poka-stage-us-east-1"
  echo "export AWS_PROFILE=poka-dev-user"
  echo ""
  echo "# Export Regions"
  echo "export AWS_DEFAULT_REGION=us-east-1"
  echo "export AWS_DEFAULT_REGION=ca-central-1"
  echo "export AWS_DEFAULT_REGION=eu-central-1"
  echo ""
  echo "# Deploy Instances"
  echo "instance-service-ctl describe versions all --channel all"
  echo "instance-service-ctl batch update-backend-version <instance_name> <image_name>"
}


function aws-poka-prod-assume(){
  echo "eval \$(assume-role poka-prod-us-east-1)" | pbcopy
}
function aws-poka-stage-assume(){
  echo "eval \$(assume-role poka-stage-us-east-1)" | pbcopy
}
function aws-poka-dev-assume(){
  echo "eval \$(assume-role poka-dev-user)" | pbcopy
}
function aws-poka-prod-us1(){
  echo "export AWS_PROFILE=poka-prod-us-east-1\nexport AWS_DEFAULT_REGION=us-east-1" | pbcopy
}
function aws-poka-prod-ca1(){
  echo "export AWS_PROFILE=poka-prod-us-east-1\nexport AWS_DEFAULT_REGION=ca-central-1" | pbcopy
}
function aws-poka-prod-eu1(){
  echo "export AWS_PROFILE=poka-prod-us-east-1\nexport AWS_DEFAULT_REGION=eu-central-1" | pbcopy
}
function aws-poka-stage-us1(){
  echo "export AWS_PROFILE=poka-stage-us-east-1\nexport AWS_DEFAULT_REGION=us-east-1" | pbcopy
}
function aws-poka-stage-ca1(){
  echo "export AWS_PROFILE=poka-stage-us-east-1\nexport AWS_DEFAULT_REGION=ca-central-1" | pbcopy
}
function aws-poka-stage-eu1(){
  echo "export AWS_PROFILE=poka-stage-us-east-1\nexport AWS_DEFAULT_REGION=eu-central-1" | pbcopy
}
function aws-poka-dev-us1(){
  echo "export AWS_PROFILE=poka-dev-user\nexport AWS_DEFAULT_REGION=us-east-1" | pbcopy
}
function aws-poka-dev-ca1(){
  echo "export AWS_PROFILE=poka-dev-user\nexport AWS_DEFAULT_REGION=ca-central-1" | pbcopy
}


function aws-poka(){
  params=($(echo "$1" | tr ":" "\n"))
  echo ${params[1]}
  echo ${params[2]}
}

function pv2(){
  instance=$1
  backend=$(curl -sb --request GET "https://$instance/version" | cut -c2-)
  frontend=$(curl -sb --request GET "https://$instance/webapp-version" | cut -c2-)

  echo "[-] $instance"
  echo "Backend ...... : $backend"
  echo "Frontend ..... : $frontend"
}

function pyc-clear(){
  find . -type f -name '*.py[co]' -delete -print -o -type d -name __pycache__ -delete >/dev/null
}

function dbtext-clear(){
  psql --host=localhost --username=poka_dev -c '\l' | awk '/test/ {print $1}' | xargs -I{} psql --host=localhost --username=poka_dev -c "DROP DATABASE {}"
}

function flush-redis(){
  docker exec poka-backend_redis redis-cli FLUSHALL
}