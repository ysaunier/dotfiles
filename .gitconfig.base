[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    la = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    pall = !"git pull; git submodule foreach git pull origin master"
    # Fetch and Pull remote changes
    fp = !"git fetch origin; git pull"
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    go = checkout -B
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Push changes on server
    poh = push -u origin HEAD
    # Create new branch
    cob = checkout -b
    # Move on a branch
    # co = checkout -B
    co = "! fn() { git fetch --all; git checkout $1; git pull; }; fn"
    # create commit with message
    cm = commit -m
    # Revert changes
    undo = reset --hard origin/master
    # Create delta with the last version tag
    rnotes = "! fn() { git fetch --all; git log $(git describe --tags --abbrev=0 origin/master)..origin/master --format=\"- %s\"; }; fn"
    # Push an empty commit for trigger the CI
    peoh = "! fn() { git commit --allow-empty -m \"trigger CI\"; git poh; }; fn"
    # View abbreviated SHA, description, and history graph
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    branch-name = rev-parse --abbrev-ref HEAD
    parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"
    set-upstream = "! fn() { BNAME=$(git branch-name); git branch --set-upstream-to="origin/$BNAME" "$BNAME"; }; fn"
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    branch-clean = "! fn() { git fetch -p && for branch in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do git branch -D $branch; done; }; fn"
	blog = log --graph --decorate --oneline
	delete-local-branches = ! git remote update --prune | git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D
	dlb = delete-local-branches
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    excludesfile = ~/.dotfiles/.gitignore_global
    # Use custom `.gitignore` and `.gitattributes`
    attributesfile = ~/.gitattributes
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
    # all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    whitespace = tab-in-indent,tabwidth=4,trailing-space
    editor = nano

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

[push]
    default = matching
[help]
    autocorrect = 5
[commit]
	gpgsign = true
[user]
	signingkey = <REPLACE_IT>

[pull]
	rebase = false
