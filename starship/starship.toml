# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

#format = """$username$hostname$localip$shlvl$singularity$kubernetes$directory$vcsh$fossil_branch$git_branch$git_commit$git_state$git_metrics$git_status$hg_branch$pijul_channel$docker_context$package$bun$c$cmake$cobol$daml$dart$deno$dotnet$elixir$elm$erlang$fennel$golang$gradle$haskell$haxe$helm$java$julia$kotlin$lua$nim$nodejs$ocaml$opa$perl$php$pulumi$purescript$python$raku$rlang$red$ruby$rust$scala$swift$terraform$vlang$vagrant$zig$buf$guix_shell$nix_shell$conda$meson$spack$memory_usage$aws$gcloud$openstack$azure$env_var$crystal$custom$sudo$cmd_duration$line_break$jobs$battery$time$status$container$os$shell$python_venv$character
#"""

format = """
$all\
$aws_env\
$aws_region\
$aws_profile_debug\
$time\
${custom.python_venv}\
$character
"""

[aws]
format = '\[[$symbol( $profile)( - $region)(\[$duration\])]($style)\]'
symbol = 'üåèÔ∏è'
disabled = true

[bun]
format = '\[[$symbol($version)]($style)\]'

[c]
format = '\[[$symbol($version(-$name))]($style)\]'

[cmake]
format = '\[[$symbol($version)]($style)\]'

[cmd_duration]
format = '\[[‚è± $duration]($style)\]'

[cobol]
format = '\[[$symbol($version)]($style)\]'

[conda]
format = '\[[$symbol$environment]($style)\]'

[crystal]
format = '\[[$symbol($version)]($style)\]'

[daml]
format = '\[[$symbol($version)]($style)\]'

[dart]
format = '\[[$symbol($version)]($style)\]'

[deno]
format = '\[[$symbol($version)]($style)\]'

[docker_context]
disabled = true

[dotnet]
format = '\[[$symbol($version)(üéØ $tfm)]($style)\]'

[elixir]
format = '\[[$symbol($version \(OTP $otp_version\))]($style)\]'

[elm]
format = '\[[$symbol($version)]($style)\]'

[erlang]
format = '\[[$symbol($version)]($style)\]'

[fennel]
format = '\[[$symbol($version)]($style)\]'

[fossil_branch]
format = '\[[$symbol$branch]($style)\]'

[gcloud]
format = '\[[$symbol$account(@$domain)(\($region\))]($style)\]'

[git_branch]
format = '\[[$symbol$branch]($style)\]'

[git_status]
format = '([\[$all_status$ahead_behind\]]($style))'

[golang]
format = '\[[$symbol($version)]($style)\]'

[gradle]
format = '\[[$symbol($version)]($style)\]'

[guix_shell]
format = '\[[$symbol]($style)\]'

[haskell]
format = '\[[$symbol($version)]($style)\]'

[haxe]
format = '\[[$symbol($version)]($style)\]'

[helm]
format = '\[[$symbol($version)]($style)\]'

[hg_branch]
format = '\[[$symbol$branch]($style)\]'

[java]
format = '\[[$symbol($version)]($style)\]'

[julia]
format = '\[[$symbol($version)]($style)\]'

[kotlin]
format = '\[[$symbol($version)]($style)\]'

[kubernetes]
format = '\[[$symbol$context( \($namespace\))]($style)\]'

[lua]
format = '\[[$symbol($version)]($style)\]'

[memory_usage]
format = '\[$symbol[$ram( | $swap)]($style)\]'

[meson]
format = '\[[$symbol$project]($style)\]'

[nim]
format = '\[[$symbol($version)]($style)\]'

[nix_shell]
format = '\[[$symbol$state( \($name\))]($style)\]'

[nodejs]
format = '\[[$symbol($version)]($style)\]'

[ocaml]
format = '\[[$symbol($version)(\($switch_indicator$switch_name\))]($style)\]'

[opa]
format = '\[[$symbol($version)]($style)\]'

[openstack]
format = '\[[$symbol$cloud(\($project\))]($style)\]'

[os]
format = '\[[$symbol]($style)\]'

[package]
format = '\[[$symbol$version]($style)\]'

[perl]
format = '\[[$symbol($version)]($style)\]'

[php]
format = '\[[$symbol($version)]($style)\]'

[pijul_channel]
format = '\[[$symbol$channel]($style)\]'

[pulumi]
format = '\[[$symbol$stack]($style)\]'

[purescript]
format = '\[[$symbol($version)]($style)\]'

[python]
format = '\[[${symbol}${pyenv_prefix}(${version})]($style)\]'

[raku]
format = '\[[$symbol($version-$vm_version)]($style)\]'

[red]
format = '\[[$symbol($version)]($style)\]'

[ruby]
format = '\[[$symbol($version)]($style)\]'

[rust]
format = '\[[$symbol($version)]($style)\]'

[scala]
format = '\[[$symbol($version)]($style)\]'

[spack]
format = '\[[$symbol$environment]($style)\]'

[sudo]
format = '\[[as $symbol]\]'

[swift]
format = '\[[$symbol($version)]($style)\]'

[terraform]
format = '\[[$symbol$workspace]($style)\]'

[time]
disabled = false
style = "bold bright-black"
# style = "fg:#EEDC82"
time_format = "%R" # Hour:Minute Format
format = '\[[$time]($style)\]'


[username]
format = '\[[$user]($style)\]'

[vagrant]
format = '\[[$symbol($version)]($style)\]'

[vlang]
format = '\[[$symbol($version)]($style)\]'

[zig]
format = '\[[$symbol($version)]($style)\]'

[directory]
truncate_to_repo = false

# Custom Segments

[custom.python_venv]
description = "Python virtual environment prompt"
format = '\([$output]($style)\)'
command = "cat $VIRTUAL_ENV/pyvenv.cfg | grep 'prompt = ' | cut -c 10- | tr -d \"'\""
when = '[ -f "$VIRTUAL_ENV/pyvenv.cfg" ]'
style = 'bold fg:#FFA500'
shell = ['sh']
disabled = false

# [custom.aws_poka_dev]
# description = "AWS Poka Profile : development"
# format = '\[[DEV]($style)\]'
# command = ''
# when = '[[ "$AWS_PROFILE" == *"poka-dev"* ]]'
# style = 'bold bright-green'
# shell = ['sh']
# disabled = false

# [custom.aws_poka_stage]
# description = "AWS Poka Profile : stage"
# format = '\[[STAGE]($style)\]'
# command = ''
# when = '[[ "$AWS_PROFILE" == *"poka-stage"* ]]'
# style = 'bold bright-yellow'
# shell = ['sh']
# disabled = false

# [custom.aws_poka_prod]
# description = "AWS Poka Profile : production"
# format = '\[[PROD]($style)\]'
# command = ''
# when = '[[ "$AWS_PROFILE" == *"poka-prod"* ]]'
# style = 'bold bright-red'
# shell = ['sh']
# disabled = false

# [custom.aws_poka_ci]
# description = "AWS Poka CI"
# format = '\[[CI]($style)\]'
# command = ''
# when = '[[ "$AWS_PROFILE" == *"poka-ci"* ]]'
# style = 'bold bright-purple'
# shell = ['sh']
# disabled = false

# [custom.aws_poka_public]
# description = "AWS Poka pubic"
# format = '\[[CI]($style)\]'
# command = ''
# when = '[[ "$AWS_PROFILE" == *"poka-public"* ]]'
# style = 'bold bright-purple'
# shell = ['sh']
# disabled = false

# [custom.aws_profile_debug]
# description = "AWS Poka pubic"
# format = '\[[$output]($style)\]'
# command = 'echo "$AWS_PROFILE"'
# when = ''
# style = 'bold bright-purple'
# shell = ['sh']
# disabled = false

[custom.aws_env]
description = "AWS Poka Region"
format = '\[[$output]($style)\]'
command = 'aws configure get environment'
when = 'test $(aws configure get environment)'
style = 'bold bright-purple'
shell = ['sh']
disabled = false


[custom.aws_region]
description = "AWS Poka Region"
format = '\[[$output]($style)\]'
command = 'aws configure get region'
when = 'test $(aws configure get region)'
style = 'bold bright-cyan'
shell = ['sh']
disabled = false


# [custom.aws_misc]
# description = "AWS Poka Region"
# format = '\[[$output]($style)\]'
# command = 'echo "$AWS_PROFILE" | grep -qi "ci" && echo "CI" || echo "$AWS_PROFILE" | grep -qi "public" && echo "PUBLIC"'
# when = 'test $(echo "$AWS_PROFILE" | grep -qi "ci" && echo "CI" || echo "$AWS_PROFILE" | grep -qi "public" && echo "PUBLIC")'
# style = 'bold bright-cyan'
# shell = ['sh']
# disabled = false




