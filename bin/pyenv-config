#! /usr/bin/env bash

RED="\033[31m"
GREEN="\033[32m"
BLUE="\033[34m"
YELLOW="\033[33m"
NC="\033[0m"

fgGreen (){
  echo -e "${GREEN}$1${NC}"
}

fgRed (){
  echo -e "${RED}$1${NC}"
}

fgBlue (){
  echo -e "${BLUE}$1${NC}"
}

fgYellow (){
  echo -e "${YELLOW}$1${NC}"
}


if ! command -v pyenv &> /dev/null
then
    echo -e "[E] $(fgRed 'Pyenv not installed. (see https://github.com/pyenv/pyenv#installation) Aborting.')"
    exit 1
fi


header () {
  clear
  if command -v figlet &> /dev/null
  then
      figlet -f standard "Pyenv Config"
      echo ""
  fi
}


header

# PYENV ENV
echo "____ Pyenv Environment ____"
echo ""

pyenvVersion="$(pyenv --version | cut -c 7-)"
echo -e "[-] Pyenv version ............ : $(fgBlue $pyenvVersion)"
pyenvLatest="$(pyenv latest 3)"
echo -e "[-] Pyenv latest ............. : $(fgBlue $pyenvLatest)"
pyenvGlobal="$(pyenv global)"
echo -e "[-] Global Python version .... : $(fgBlue $pyenvGlobal)"

echo "[-] Installed Python 3.x :"
arrInstalledVersions=($(ls ~/.pyenv/versions/ | grep "^3." | sort -V))
echo "${arrInstalledVersions[@]}" | tr ' ' '\n' | xargs -I {} echo -e "- $(fgBlue {})"

echo "[-] Available latest Python 3.x :"
arrAvailableVersions=()
arrAvailableVersions+=($(pyenv install --list | grep ' 3\.10\.' | tail -n 1 | xargs))
arrAvailableVersions+=($(pyenv install --list | grep ' 3\.11\.' | tail -n 1 | xargs))
echo "${arrAvailableVersions[@]}" | tr ' ' '\n' | xargs -I {} echo -e "- $(fgBlue {})"

# === INSTALL LATEST VERSIONS FOR PYTHON 3.10.x and 3.11.x ===
arrVersionToInstall=($(printf %s\\n $arrAvailableVersions | grep -Fvx "${arrInstalledVersions[@]/#/-e}"))
if [ -n "$arrVersionToInstall" ]; then
  echo ""
  while true; do
      question=$(echo -e "[Q] $(fgYellow 'Do you wish to install the latest version?') [y|N] ")
      read -p "$question" yn
      case $yn in
          [Yy]* )
            echo "[-] Installing latest Python 3.10.x and 3.11.x..."
            pyenv install --list | grep ' 3\.10\.' | tail -n 1 | xargs pyenv install
            pyenv install --list | grep ' 3\.11\.' | tail -n 1 | xargs pyenv install
            break
            ;;
          [Nn]* )
            break
            ;;
          * ) echo -e "[E] $(fgRed 'Please answer yes or no.')";;
      esac
  done
else
  echo -e "[-] $(fgGreen 'Already up to date.')"
fi

# === CLEAN OLDEST VERSIONS ===
arrVersionToUninstall=($(printf %s\\n $arrInstalledVersions | grep -Fvx "${arrAvailableVersions[@]/#/-e}"))
if [ -n "$arrVersionToUninstall" ]; then
  echo ""
  while true; do
      question=$(echo -e "[Q] $(fgYellow 'Do you wish to clean the oldest versions?') [y|N] ")
      read -p "$question" yn
      case $yn in
          [Yy]* )
            echo "[-] Uninstalling oldest versions..."
            for pVersion in "${arrVersionToUninstall[@]}"
            do
              pyenv uninstall "$pVersion"
            done
            break;;
          [Nn]* )
            break;;
          * ) echo -e "[E] $(fgRed 'Please answer yes or no.')";;
      esac
      if [ -n "$selected_p_version" ]; then break; fi
  done
else
  echo -e "[-] $(fgGreen 'Python version list is already cleaned.')"
fi

# === DEFINE GLOBAL VERSION ===
arrInstalledVersions=($(ls ~/.pyenv/versions/ | grep "^3." | sort -V))
echo ""
while true; do
    question=$(echo -e "[Q] $(fgYellow 'Do you wish to define a global version?') [y|N] : ")
    read -p "$question" yn
    case $yn in
        [Yy]* )
          # echo -e "[Q] $(fgYellow 'Which version?') "
          PS3="[Q] $(fgYellow 'Which version?') [number] : "
          select selectedVersion in "${arrInstalledVersions[@]}"
          do
            pyenv global "$selectedVersion"
            break
          done
          break;;
        [Nn]* )
          break;;
        * ) echo -e "[E] $(fgRed 'Please answer yes or no.')";;
    esac
    if [ -n "$selected_p_version" ]; then break; fi
done


# Env WIP
header
echo "____ Venv Environment _____"
echo ""

echo "WIP"
exit


test -d .venv | { echo "Environment .venv not found. Aborting."; exit 1; }

while true; do
    question=$(echo -e "[Q] $(fgYellow 'Do you wish to create new venv?') [y|N] ")
    read -p "$question" yn
    case $yn in
        [Yy]* )
          rm -rf .venv
          break
          ;;
        [Nn]* )
          exit 1
          ;;
        * ) echo -e "[E] $(fgRed 'Please answer yes or no.')";;
    esac
done

